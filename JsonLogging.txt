Below is a sample documentation for implementing JSON logging using the Winston library in a Node.js React application to standardize logging across different applications.

---

# Implementing JSON Logging with Winston in a Node.js React Application

## Overview

This guide provides step-by-step instructions to set up JSON logging using the Winston library in a Node.js React application. Standardizing logging across different applications helps in ensuring consistency, ease of debugging, and better log management.

## Prerequisites

- Node.js and npm installed
- Basic knowledge of Node.js and React
- An existing Node.js React application

## Step 1: Install Winston and Required Dependencies

To get started, you need to install Winston and its dependencies.

```bash
npm install winston winston-daily-rotate-file
```

- **`winston`**: A versatile logging library for Node.js.
- **`winston-daily-rotate-file`**: A transport for logging messages to daily log files, with automatic rotation.

## Step 2: Create a Winston Logger Configuration

Create a new file called `logger.js` (or `logger.ts` if using TypeScript) in your project's root directory or within a `utils` or `config` directory.

```javascript
const { createLogger, format, transports } = require('winston');
require('winston-daily-rotate-file');

// Custom format for JSON logging
const jsonFormat = format.combine(
  format.timestamp(),
  format.json()
);

const logger = createLogger({
  level: 'info',
  format: jsonFormat,
  transports: [
    new transports.Console(), // Log to the console
    new transports.DailyRotateFile({ // Log to files, rotating daily
      filename: 'logs/application-%DATE%.log',
      datePattern: 'YYYY-MM-DD',
      zippedArchive: true,
      maxSize: '20m',
      maxFiles: '14d'
    })
  ]
});

// Remove `req.logger` after logging, based on user preference
logger.add(new transports.Console({
  format: format.combine(
    format.printf(({ level, message, timestamp, ...meta }) => {
      if (meta.req && meta.req.logger) delete meta.req.logger;
      return JSON.stringify({ timestamp, level, message, ...meta });
    })
  )
}));

module.exports = logger;
```

### Key Points:
- **JSON Format**: Ensures logs are structured and consistent, making them easier to parse and analyze.
- **Daily Rotation**: Manages log files efficiently by rotating them daily, preventing excessive log sizes.
- **Custom Format**: Removes the `req.logger` object after logging to avoid potential issues with circular references or unnecessary data retention.

## Step 3: Integrate the Logger in Your Application

### In a Node.js Backend

In your Node.js backend, you can use the logger as follows:

```javascript
const logger = require('./logger');

app.use((req, res, next) => {
  req.logger = logger; // Attach logger to request object
  req.logger.info('Request received', { method: req.method, url: req.url });
  next();
});

app.get('/', (req, res) => {
  req.logger.info('Handling root route');
  res.send('Hello World');
});
```

### In a React Frontend

For the React frontend, it's common to send logs from client-side errors or important events to the backend for centralized logging. Hereâ€™s an example of how to do this:

```javascript
import axios from 'axios';

export function logError(message, data) {
  axios.post('/api/log', {
    level: 'error',
    message: message,
    data: data
  });
}
```

On the backend, create a route to handle these logs:

```javascript
app.post('/api/log', (req, res) => {
  const { level, message, data } = req.body;
  logger.log({ level, message, ...data });
  res.status(200).send('Log received');
});
```

## Step 4: Test Your Implementation

To ensure your logging is working as expected:

1. Run your Node.js server and make a few requests.
2. Check the console and log files to see the structured JSON logs.
3. Validate that `req.logger` is removed after logging if added in the middleware.

## Conclusion

By following these steps, you've implemented JSON logging using the Winston library in your Node.js React application. This setup will help maintain consistent logging across different applications, making it easier to monitor, debug, and analyze your logs.

---

This documentation should guide developers in implementing standardized JSON logging in their Node.js React applications using Winston.
